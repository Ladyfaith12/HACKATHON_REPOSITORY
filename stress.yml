config:
  target: "https://qa.api.pwfieldtool.com"
  tls: 
    rejectUnauthorized: false
  processor: "./selectRandomEval.js"
  
  # Stress Test Phases - Gradually increase load until breaking point
  phases:
    # Phase 1: Warm up
    - name: "warm_up"
      duration: 60        # 1 minute warm up
      arrivalRate: 5      # Start with 5 users/second
    
    # Phase 2: Ramp up gradually
    - name: "ramp_up_phase_1" 
      duration: 120       # 2 minutes
      arrivalRate: 5      # Start at 5/sec
      rampTo: 15          # Increase to 15/sec
    
    # Phase 3: Moderate stress
    - name: "ramp_up_phase_2"
      duration: 120       # 2 minutes  
      arrivalRate: 15     # Start at 15/sec
      rampTo: 30          # Increase to 30/sec
    
    # Phase 4: High stress
    - name: "high_stress"
      duration: 180       # 3 minutes
      arrivalRate: 30     # Start at 30/sec
      rampTo: 60          # Increase to 60/sec
      
    # Phase 5: Peak stress - find breaking point
    - name: "peak_stress"
      duration: 120       # 2 minutes
      arrivalRate: 60     # Start at 60/sec
      rampTo: 100         # Push to 100/sec
    
    # Phase 6: Extreme stress - test system limits
    - name: "extreme_stress"
      duration: 60        # 1 minute
      arrivalRate: 100    # Start at 100/sec
      rampTo: 150         # Push to 150/sec
    
    # Phase 7: Cool down - see recovery
    - name: "cool_down"
      duration: 60        # 1 minute
      arrivalRate: 10     # Drop back down

  defaults:
    headers:
      Content-Type: "application/json"
      Authorization: ""

  # Stress test specific settings
  http:
    timeout: 30000          # 30 second timeout (higher for stress testing)
    maxSockets: 100         # Allow more concurrent connections
    
scenarios:
  # Scenario 1: Heavy evaluation workflow (70% of traffic)
  - name: "Heavy_Evaluation_Workflow"
    weight: 70
    flow:
      - get:
          url: "/v1/evaluations"
          capture:
            - json: "$"
              as: "full_response"
            - json: "$[*].eval_id"
              as: "eval_ids"
      - function: "selectRandomEval"
      - get:
          url: "/v1/evaluations/{{ eval_id }}"
          expect:
            - statusCode: [200, 404]  # Allow 404s during stress testing
      - patch:
          url: "/v1/evaluations/{{ eval_id }}"
          json:
            workflow_status: "capture_in_progress"
            owner_name: "Stress Test User"
            valuation_reasons: ["Stress Testing"]
            notes: "Stress test update - {{ $randomString() }}"
            primary_contact: "Stress Test Contact"
            primary_contact_id: "6eb6d8f9-1709-4f20-9eab-5bcf7f890116"
            owner: "stress.test@example.com"
            owner_id: "{{ $randomInt(100000, 999999) }}"
            location: "{{ $randomString() }}"
            opportunity_id: "{{ $randomInt(10000, 99999) }}"
            fee_code: "Stress Test Fee"
          expect:
            - statusCode: [200, 400, 404, 429, 500, 502, 503]  # Expect potential failures

  # Scenario 2: Read-only stress (20% of traffic) 
  - name: "Read_Only_Stress"
    weight: 20
    flow:
      - get:
          url: "/v1/evaluations"
          expect:
            - statusCode: [200, 429, 500, 502, 503]
      - function: "selectRandomEval"
      - get:
          url: "/v1/evaluations/{{ eval_id }}"
          expect:
            - statusCode: [200, 404, 429, 500, 502, 503]

  # Scenario 3: Rapid fire updates (10% of traffic)
  - name: "Rapid_Updates"
    weight: 10 
    flow:
      - get:
          url: "/v1/evaluations"
          capture:
            - json: "$"
              as: "full_response" 
            - json: "$[*].eval_id"
              as: "eval_ids"
      - function: "selectRandomEval"
      # Rapid succession of updates to same eval
      - patch:
          url: "/v1/evaluations/{{ eval_id }}"
          json:
            notes: "Rapid update 1 - {{ $timestamp() }}"
          expect:
            - statusCode: [200, 400, 404, 429, 500, 502, 503]
      - patch:
          url: "/v1/evaluations/{{ eval_id }}"
          json:
            notes: "Rapid update 2 - {{ $timestamp() }}"  
          expect:
            - statusCode: [200, 400, 404, 409, 429, 500, 502, 503]
      - patch:
          url: "/v1/evaluations/{{ eval_id }}"
          json:
            notes: "Rapid update 3 - {{ $timestamp() }}"
          expect:
            - statusCode: [200, 400, 404, 409, 429, 500, 502, 503]